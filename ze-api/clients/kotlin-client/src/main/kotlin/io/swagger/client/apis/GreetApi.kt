/**
* Ze API
* description
*
* OpenAPI spec version: 1.0.0
* Contact: martin.binder@qaware.de
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.HelloDTO

import io.swagger.client.infrastructure.*

class GreetApi(basePath: kotlin.String = "http://localhost:8002/api") : ApiClient(basePath) {

    /**
    * the first service - greetings!
    * just say hello!
    * @return HelloDTO
    */
    @Suppress("UNCHECKED_CAST")
    fun greetingGet() : HelloDTO {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/greeting",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<HelloDTO>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as HelloDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Greeting with name
    * 
    * @param greetingName  
    * @return HelloDTO
    */
    @Suppress("UNCHECKED_CAST")
    fun greetingWithNameGet(greetingName: kotlin.String) : HelloDTO {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("greetingName" to listOf("$greetingName"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/greetingWithName",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<HelloDTO>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as HelloDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
